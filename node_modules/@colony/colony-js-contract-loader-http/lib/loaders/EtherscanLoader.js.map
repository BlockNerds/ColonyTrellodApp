{"version":3,"sources":["../../src/loaders/EtherscanLoader.js"],"names":["DEFAULT_ENDPOINT","etherscanTransform","response","query","Object","hasOwnProperty","call","Error","abi","result","status","parsed","address","contractAddress","bytecode","defineProperty","enumerable","configurable","get","EtherscanLoader","transform","endpoint","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;AAIA,IAAMA,mBACJ,gFADF,C,CACoF;;AAEpF,SAASC,kBAAT,CAA4BC,QAA5B,EAA+D;AAAA,MAApBC,KAAoB,uEAAJ,EAAI;;AAC7D;AACA;AACA,MACE,QAAOD,QAAP,uDAAOA,QAAP,OAAoB,QAApB,IACA,CAACE,OAAOC,cAAP,CAAsBC,IAAtB,CAA2BJ,QAA3B,EAAqC,QAArC,CAFH,EAGE;AACA,UAAM,IAAIK,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAR4D,MAU7CC,GAV6C,GAU7BN,QAV6B,CAUrDO,MAVqD;AAAA,MAUxCC,MAVwC,GAU7BR,QAV6B,CAUxCQ,MAVwC;;;AAY7D,MAAIA,WAAW,GAAf,EACE,MAAM,IAAIH,KAAJ,iDAAwDG,MAAxD,OAAN;;AAEF,MAAMC,SAAS;AACbH,YADa;AAEbI,aAAST,MAAMU,eAFF;AAGbC,cAAU;AAHG,GAAf;;AAMA;AACA;AACA;AACAV,SAAOW,cAAP,CAAsBJ,MAAtB,EAA8B,UAA9B,EAA0C;AACxCK,gBAAY,KAD4B;AAExCC,kBAAc,KAF0B;AAGxCC,OAHwC,iBAGlC;AACJ,YAAM,IAAIX,KAAJ,CAAU,wDAAV,CAAN;AACD;AALuC,GAA1C;;AAQA,SAAOI,MAAP;AACD;;IAEoBQ,e;;;AACnB,6BAIyB;AAAA,mFAAJ,EAAI;;AAAA,8BAHvBC,SAGuB;AAAA,QAHvBA,SAGuB,kCAHXnB,kBAGW;AAAA,6BAFvBoB,QAEuB;AAAA,QAFvBA,QAEuB,iCAFZrB,gBAEY;AAAA,QADpBsB,IACoB;AAAA;AAAA,oKACfD,kBADe,EACLD,oBADK,IACSE,IADT;AAExB;;;;;kBAPkBH,e","file":"EtherscanLoader.js","sourcesContent":["/* @flow */\n\nimport type { Query } from '@colony/colony-js-contract-loader';\n\nimport HttpLoader from './HttpLoader';\n\nimport type { ConstructorArgs } from '../flowtypes';\n\nconst DEFAULT_ENDPOINT =\n  'https://api.etherscan.io/api?module=contract&action=getabi&address=%%ADDRESS%%'; // eslint-disable-line max-len\n\nfunction etherscanTransform(response: any, query?: Query = {}) {\n  // TODO later: consider building some generalized response validators for\n  // common services like etherscan, infura, jsonrpc, etc.\n  if (\n    typeof response !== 'object' ||\n    !Object.hasOwnProperty.call(response, 'status')\n  ) {\n    throw new Error('Malformed response from Etherscan');\n  }\n\n  const { result: abi, status } = response;\n\n  if (status !== '1')\n    throw new Error(`Erroneous response from Etherscan (status: ${status})`);\n\n  const parsed = {\n    abi,\n    address: query.contractAddress,\n    bytecode: '',\n  };\n\n  // Etherscan's API does not return a bytecode property, so we will employ a\n  // custom getter (which throws an error) in order to make this clear.\n  // $FlowFixMe: we don't want to assign a value\n  Object.defineProperty(parsed, 'bytecode', {\n    enumerable: false,\n    configurable: false,\n    get() {\n      throw new Error('Etherscan does not currently provide contract bytecode');\n    },\n  });\n\n  return parsed;\n}\n\nexport default class EtherscanLoader extends HttpLoader {\n  constructor({\n    transform = etherscanTransform,\n    endpoint = DEFAULT_ENDPOINT,\n    ...rest\n  }: ConstructorArgs = {}) {\n    super({ endpoint, transform, ...rest });\n  }\n}\n"]}