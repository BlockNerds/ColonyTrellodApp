'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _HttpLoader2 = require('./HttpLoader');

var _HttpLoader3 = _interopRequireDefault(_HttpLoader2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_ENDPOINT = 'https://api.etherscan.io/api?module=contract&action=getabi&address=%%ADDRESS%%'; // eslint-disable-line max-len

function etherscanTransform(response) {
  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // TODO later: consider building some generalized response validators for
  // common services like etherscan, infura, jsonrpc, etc.
  if ((typeof response === 'undefined' ? 'undefined' : (0, _typeof3.default)(response)) !== 'object' || !Object.hasOwnProperty.call(response, 'status')) {
    throw new Error('Malformed response from Etherscan');
  }

  var abi = response.result,
      status = response.status;


  if (status !== '1') throw new Error('Erroneous response from Etherscan (status: ' + status + ')');

  var parsed = {
    abi: abi,
    address: query.contractAddress,
    bytecode: ''
  };

  // Etherscan's API does not return a bytecode property, so we will employ a
  // custom getter (which throws an error) in order to make this clear.
  // $FlowFixMe: we don't want to assign a value
  Object.defineProperty(parsed, 'bytecode', {
    enumerable: false,
    configurable: false,
    get: function get() {
      throw new Error('Etherscan does not currently provide contract bytecode');
    }
  });

  return parsed;
}

var EtherscanLoader = function (_HttpLoader) {
  (0, _inherits3.default)(EtherscanLoader, _HttpLoader);

  function EtherscanLoader() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _ref$transform = _ref.transform,
        transform = _ref$transform === undefined ? etherscanTransform : _ref$transform,
        _ref$endpoint = _ref.endpoint,
        endpoint = _ref$endpoint === undefined ? DEFAULT_ENDPOINT : _ref$endpoint,
        rest = (0, _objectWithoutProperties3.default)(_ref, ['transform', 'endpoint']);
    (0, _classCallCheck3.default)(this, EtherscanLoader);
    return (0, _possibleConstructorReturn3.default)(this, (EtherscanLoader.__proto__ || Object.getPrototypeOf(EtherscanLoader)).call(this, (0, _extends3.default)({ endpoint: endpoint, transform: transform }, rest)));
  }

  return EtherscanLoader;
}(_HttpLoader3.default);

exports.default = EtherscanLoader;
//# sourceMappingURL=EtherscanLoader.js.map