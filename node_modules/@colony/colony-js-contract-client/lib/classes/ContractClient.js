'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _ContractMethod = require('./ContractMethod');

var _ContractMethod2 = _interopRequireDefault(_ContractMethod);

var _ContractMethodCaller = require('./ContractMethodCaller');

var _ContractMethodCaller2 = _interopRequireDefault(_ContractMethodCaller);

var _ContractMethodSender = require('./ContractMethodSender');

var _ContractMethodSender2 = _interopRequireDefault(_ContractMethodSender);

var _ContractMethodMultisigSender = require('./ContractMethodMultisigSender');

var _ContractMethodMultisigSender2 = _interopRequireDefault(_ContractMethodMultisigSender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ContractClient = function () {
  (0, _createClass3.default)(ContractClient, null, [{
    key: 'Caller',


    // Static getters used in lieu of named exports; this package only has
    // one export.


    // The contract interface (as provided by the adapter)
    get: function get() {
      return _ContractMethodCaller2.default;
    }

    // The contract loading query the class was constructed with

    // The adapter used to communicate with the blockchain

  }, {
    key: 'Sender',
    get: function get() {
      return _ContractMethodSender2.default;
    }
  }, {
    key: 'MultisigSender',
    get: function get() {
      return _ContractMethodMultisigSender2.default;
    }
  }, {
    key: 'defaultQuery',
    get: function get() {
      // eslint-disable-next-line no-console
      console.warn('No query defined; defaultQuery is designed to be ' + 'defined in a derived class');
      return {};
    }
  }]);

  function ContractClient(_ref) {
    var adapter = _ref.adapter,
        query = _ref.query;
    (0, _classCallCheck3.default)(this, ContractClient);

    this.adapter = adapter;
    this._query = Object.assign({}, this.constructor.defaultQuery, query);
  }

  (0, _createClass3.default)(ContractClient, [{
    key: 'init',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this._contract) {
                  _context.next = 2;
                  break;
                }

                throw new Error('ContractClient already initialized');

              case 2:
                _context.next = 4;
                return this.adapter.getContract(this._query);

              case 4:
                this._contract = _context.sent;

                this.initializeContractMethods();
                return _context.abrupt('return', this);

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref2.apply(this, arguments);
      }

      return init;
    }()

    /**
     * Designed to be overridden in a derived class; called in the constructor.
     */
    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'initializeContractMethods',
    value: function initializeContractMethods() {}

    /**
     * Low-level method to call a named contract function with an array of
     * arguments that have been properly validated for that function.
     */

  }, {
    key: 'call',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(functionName, args) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', this.contract.callConstant(functionName, args));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function call(_x, _x2) {
        return _ref3.apply(this, arguments);
      }

      return call;
    }()

    /**
     * Low-level method to estimate the gas cost of sending a transaction to
     * call a contract function with an array of arguments that have been
     * properly validated for that function.
     */

  }, {
    key: 'estimate',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(functionName, args) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt('return', this.contract.callEstimate(functionName, args));

              case 1:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function estimate(_x3, _x4) {
        return _ref4.apply(this, arguments);
      }

      return estimate;
    }()

    /**
     * Low-level method to send a transaction to a named contract function
     * with an array of arguments that have been properly validated for that
     * function, and optional transaction options.
     */

  }, {
    key: 'send',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(functionName, args, options) {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', this.contract.callTransaction(functionName, args, options));

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function send(_x5, _x6, _x7) {
        return _ref5.apply(this, arguments);
      }

      return send;
    }()
  }, {
    key: 'getEventData',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(params) {
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', this.adapter.getEventData(params));

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getEventData(_x8) {
        return _ref6.apply(this, arguments);
      }

      return getEventData;
    }()
  }, {
    key: 'createTransactionData',
    value: function createTransactionData(functionName, args) {
      return this.contract.createTransactionData(functionName, args);
    }
  }, {
    key: 'addMethod',
    value: function addMethod(Method, name, def) {
      if (Reflect.has(this, name)) throw new Error('A ContractMethod named "' + name + '" already exists');

      Object.assign(this, (0, _defineProperty3.default)({}, name, new Method((0, _extends3.default)({ name: name, functionName: name, client: this }, def))));
    }
  }, {
    key: 'addCaller',
    value: function addCaller(name, def) {
      this.addMethod(this.constructor.Caller, name, def);
    }
  }, {
    key: 'addSender',
    value: function addSender(name, def) {
      this.addMethod(this.constructor.Sender, name, def);
    }
  }, {
    key: 'addMultisigSender',
    value: function addMultisigSender(name, def) {
      this.addMethod(this.constructor.MultisigSender, name, def);
    }
  }, {
    key: 'contract',
    get: function get() {
      if (!this._contract) throw new Error('Contract not loaded; did you forget to call `.init()`?');
      return this._contract;
    }
  }]);
  return ContractClient;
}();

exports.default = ContractClient;
//# sourceMappingURL=ContractClient.js.map