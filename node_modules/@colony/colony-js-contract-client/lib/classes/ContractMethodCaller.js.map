{"version":3,"sources":["../../src/classes/ContractMethodCaller.js"],"names":["ContractMethodCaller","values","Object","some","value","client","functionName","input","output","name","validateEmpty","_validateEmpty","inputValues","outputValues","isValid","reason","message","toString","Error","args","getValidatedArgs","call","response","_getOutputValues","constructor","containsNullValues"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAEA;;;;AACA;;;;;;IAIqBA,oB;;;;uCAOOC,M,EAAuB;AAC/C,UAAI,sBAAcA,MAAd,CAAJ,EACE,OAAOC,OAAOD,MAAP,CAAcA,UAAU,EAAxB,EAA4BE,IAA5B,CAAiC;AAAA,eAASC,UAAU,IAAnB;AAAA,OAAjC,CAAP;AACF,aAAO,KAAP;AACD;;;AAED,kCASQ;AAAA,mFAAJ,EAAI;AAAA,QARNC,MAQM,QARNA,MAQM;AAAA,QAPNC,YAOM,QAPNA,YAOM;AAAA,QANNC,KAMM,QANNA,KAMM;AAAA,QALNC,MAKM,QALNA,MAKM;AAAA,QAJNC,IAIM,QAJNA,IAIM;AAAA,QAHNC,aAGM,QAHNA,aAGM;;AAAA;;AAAA,0JACA,EAAEL,cAAF,EAAUI,UAAV,EAAgBH,0BAAhB,EAA8BC,YAA9B,EAAqCC,cAArC,EADA;;AAEN,QAAIE,aAAJ,EAAmB,MAAKC,cAAL,GAAsBD,aAAtB;AAFb;AAGP;;;;;4GAEmBE,W,EAAgBC,Y;;;;;;qBAC9B,KAAKF,c;;;;;AACHG,uB,GAAmB,K;AACnBC,sB;;;uBAEc,KAAKJ,cAAL,CAAoBC,WAApB,EAAiCC,YAAjC,C;;;AAAhBC,uB;;;;;;;;AAEAC,yBAAS,YAAMC,OAAN,IAAiB,YAAMC,QAAN,EAA1B;;;oBAEGH,O;;;;;sBACG,IAAII,KAAJ,qBAA2BH,gBAAcA,MAAd,SAA0B,EAArD,E;;;iDAEH,I;;;;;;;;;;;;;;;;;AAGT;;;;;;;;6GAIWH,W;;;;;;AACHO,oB,GAAO,KAAKC,gBAAL,CAAsBR,WAAtB,C;;uBACU,KAAKP,MAAL,CAAYgB,IAAZ,CAAiB,KAAKf,YAAtB,EAAoCa,IAApC,C;;;AAAjBG,wB;AAEAT,4B,GAAe,KAAKU,gBAAL,CAAsBD,QAAtB,EAAgCV,WAAhC,C;;qBAEjB,KAAKY,WAAL,CAAiBC,kBAAjB,CAAoCZ,YAApC,C;;;;;;uBACI,KAAKH,aAAL,CAAmBE,WAAnB,EAAgCC,YAAhC,C;;;kDAEDA,Y;;;;;;;;;;;;;;;;;;;;kBAvDUb,oB","file":"ContractMethodCaller.js","sourcesContent":["/* @flow */\n\nimport isPlainObject from 'lodash.isplainobject';\n\nimport ContractClient from './ContractClient';\nimport ContractMethod from './ContractMethod';\n\nimport type { ContractMethodArgs, ValidateEmpty } from '../flowtypes';\n\nexport default class ContractMethodCaller<\n  InputValues: { [inputValueName: string]: any },\n  OutputValues: { [outputValueName: string]: any },\n  IContractClient: ContractClient,\n> extends ContractMethod<InputValues, OutputValues, IContractClient> {\n  _validateEmpty: ?ValidateEmpty;\n\n  static containsNullValues(values: Object | null) {\n    if (isPlainObject(values))\n      return Object.values(values || {}).some(value => value === null);\n    return false;\n  }\n\n  constructor({\n    client,\n    functionName,\n    input,\n    output,\n    name,\n    validateEmpty,\n  }: ContractMethodArgs<IContractClient> & {\n    validateEmpty?: ValidateEmpty,\n  } = {}) {\n    super({ client, name, functionName, input, output });\n    if (validateEmpty) this._validateEmpty = validateEmpty;\n  }\n\n  async validateEmpty(inputValues: *, outputValues: *) {\n    if (this._validateEmpty) {\n      let isValid: boolean = false;\n      let reason;\n      try {\n        isValid = await this._validateEmpty(inputValues, outputValues);\n      } catch (error) {\n        reason = error.message || error.toString();\n      }\n      if (!isValid)\n        throw new Error(`Empty response${reason ? ` (${reason})` : ''}`);\n    }\n    return true;\n  }\n\n  /**\n   * Given named input values, perform a call on the method's\n   * contract function, and get named output values from the result.\n   */\n  async call(inputValues?: InputValues) {\n    const args = this.getValidatedArgs(inputValues);\n    const response = await this.client.call(this.functionName, args);\n\n    const outputValues = this._getOutputValues(response, inputValues);\n\n    if (this.constructor.containsNullValues(outputValues))\n      await this.validateEmpty(inputValues, outputValues);\n\n    return outputValues;\n  }\n}\n"]}