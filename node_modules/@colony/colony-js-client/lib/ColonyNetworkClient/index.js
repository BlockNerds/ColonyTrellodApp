'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _web3Utils = require('web3-utils');

var _colonyJsUtils = require('@colony/colony-js-utils');

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

var _colonyJsContractClient = require('@colony/colony-js-contract-client');

var _colonyJsContractClient2 = _interopRequireDefault(_colonyJsContractClient);

var _index = require('../ColonyClient/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MISSING_ID = 'An ID parameter must be provided';

var ColonyNetworkClient = function (_ContractClient) {
  (0, _inherits3.default)(ColonyNetworkClient, _ContractClient);

  function ColonyNetworkClient() {
    (0, _classCallCheck3.default)(this, ColonyNetworkClient);
    return (0, _possibleConstructorReturn3.default)(this, (ColonyNetworkClient.__proto__ || Object.getPrototypeOf(ColonyNetworkClient)).apply(this, arguments));
  }

  (0, _createClass3.default)(ColonyNetworkClient, [{
    key: 'createToken',


    /*
    Deploys a new ERC20 compatible token contract for you to use with your Colony. You can also use your own token when creating a Colony.
    */
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref) {
        var name = _ref.name,
            symbol = _ref.symbol,
            _ref$decimals = _ref.decimals,
            decimals = _ref$decimals === undefined ? 18 : _ref$decimals;

        var transaction, _ref3, hash, _ref4, contractAddress;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.adapter.getContractDeployTransaction({
                  contractName: 'Token'
                }, [(0, _web3Utils.utf8ToHex)(name), (0, _web3Utils.utf8ToHex)(symbol), decimals]);

              case 2:
                transaction = _context.sent;
                _context.next = 5;
                return this.adapter.wallet.sendTransaction(transaction);

              case 5:
                _ref3 = _context.sent;
                hash = _ref3.hash;
                _context.next = 9;
                return this.adapter.getTransactionReceipt(hash);

              case 9:
                _ref4 = _context.sent;
                contractAddress = _ref4.contractAddress;
                return _context.abrupt('return', contractAddress);

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function createToken(_x) {
        return _ref2.apply(this, arguments);
      }

      return createToken;
    }()
    /*
    Returns an initialized ColonyClient for the contract at address `contractAddress`
    */

  }, {
    key: 'getColonyClientByAddress',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(contractAddress) {
        var colonyClient;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                colonyClient = new this.constructor.ColonyClient({
                  adapter: this.adapter,
                  networkClient: this,
                  query: { contractAddress: contractAddress }
                });
                return _context2.abrupt('return', colonyClient.init());

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getColonyClientByAddress(_x2) {
        return _ref5.apply(this, arguments);
      }

      return getColonyClientByAddress;
    }()
    /*
    Returns an initialized ColonyClient for the specified ID of a deployed colony contract
    */

  }, {
    key: 'getColonyClient',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(id) {
        var address;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _assert2.default)(Number.isFinite(id), MISSING_ID);
                _context3.next = 3;
                return this.getColonyAddress(id);

              case 3:
                address = _context3.sent;
                return _context3.abrupt('return', this.getColonyClientByAddress(address));

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getColonyClient(_x3) {
        return _ref6.apply(this, arguments);
      }

      return getColonyClient;
    }()
    /*
    Gets the address of a deployed colony contract for the specified ID of a deployed colony contract
    */

  }, {
    key: 'getColonyAddress',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(id) {
        var _ref8, address;

        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _assert2.default)(Number.isFinite(id), MISSING_ID);

                _context4.next = 3;
                return this.getColony.call({ id: id });

              case 3:
                _ref8 = _context4.sent;
                address = _ref8.address;

                if ((0, _colonyJsUtils.isValidAddress)(address)) {
                  _context4.next = 7;
                  break;
                }

                throw new Error('Colony with ID ' + id + ' could not be found');

              case 7:
                return _context4.abrupt('return', address);

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getColonyAddress(_x4) {
        return _ref7.apply(this, arguments);
      }

      return getColonyAddress;
    }()
    /*
    Gets the Meta Colony as an initialized ColonyClient
     */

  }, {
    key: 'getMetaColonyClient',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var _ref10, address;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getMetaColonyAddress.call();

              case 2:
                _ref10 = _context5.sent;
                address = _ref10.address;

                if ((0, _colonyJsUtils.isValidAddress)(address)) {
                  _context5.next = 6;
                  break;
                }

                throw new Error('Meta Colony could not be found');

              case 6:
                return _context5.abrupt('return', this.getColonyClientByAddress(address));

              case 7:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getMetaColonyClient() {
        return _ref9.apply(this, arguments);
      }

      return getMetaColonyClient;
    }()
  }, {
    key: 'initializeContractMethods',
    value: function initializeContractMethods() {
      var _this2 = this;

      // Callers
      this.addCaller('getColony', {
        input: [['id', 'number']],
        output: [['address', 'address']]
      });
      this.addCaller('getMetaColonyAddress', {
        functionName: 'getMetaColony',
        output: [['address', 'address']]
      });
      this.addCaller('getColonyCount', {
        output: [['count', 'number']]
      });
      this.addCaller('getColonyVersionResolver', {
        input: [['version', 'number']],
        output: [['address', 'address']]
      });
      this.addCaller('getCurrentColonyVersion', {
        output: [['version', 'number']]
      });
      this.addCaller('getStakedBalance', {
        input: [['user', 'address']],
        output: [['balance', 'bigNumber']]
      });
      this.addCaller('getParentSkillId', {
        input: [['skillId', 'number'], ['parentSkillIndex', 'number']],
        output: [['parentSkillId', 'number']]
      });
      this.addCaller('getReputationUpdateLogEntry', {
        input: [['id', 'number']],
        output: [['user', 'string'], ['amount', 'bigNumber'], ['skillId', 'number'], ['colony', 'string'], ['nUpdates', 'number'], ['nPreviousUpdates', 'number']]
      });
      this.addCaller('getReputationUpdateLogLength', {
        output: [['count', 'number']]
      });
      this.addCaller('getSkill', {
        input: [['skillId', 'number']],
        output: [['nParents', 'number'], ['nChildren', 'number']],
        validateEmpty: function () {
          var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(_ref11) {
            var skillId = _ref11.skillId;

            var _ref13, count;

            return _regenerator2.default.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return _this2.getSkillCount.call();

                  case 2:
                    _ref13 = _context6.sent;
                    count = _ref13.count;

                    if (!(skillId > count)) {
                      _context6.next = 6;
                      break;
                    }

                    throw new Error('Skill ID ' + skillId + ' not found');

                  case 6:
                    return _context6.abrupt('return', true);

                  case 7:
                  case 'end':
                    return _context6.stop();
                }
              }
            }, _callee6, _this2);
          }));

          function validateEmpty(_x5) {
            return _ref12.apply(this, arguments);
          }

          return validateEmpty;
        }()
      });
      this.addCaller('getSkillCount', {
        output: [['count', 'number']]
      });

      // Senders
      this.addSender('createColony', {
        input: [['tokenAddress', 'address']],
        defaultGasLimit: 2500000,
        eventHandlers: {
          ColonyAdded: {
            contract: this.contract,
            handler: function handler(_ref14) {
              var colonyId = _ref14.colonyId,
                  colonyAddress = _ref14.colonyAddress;

              return {
                colonyId: colonyId.toNumber(),
                colonyAddress: colonyAddress
              };
            }
          }
        }
      });
      this.addSender('deposit', {
        input: [['amount', 'bigNumber']]
      });
      this.addSender('startTokenAuction', {
        input: [['tokenAddress', 'address']],
        eventHandlers: {
          AuctionCreated: {
            contract: this.contract,
            handler: function handler(_ref15) {
              var auction = _ref15.auction,
                  token = _ref15.token,
                  quantity = _ref15.quantity;

              return {
                auction: auction,
                token: token,
                quantity: quantity.toNumber()
              };
            }
          }
        }
      });
      this.addSender('upgradeColony', {
        input: [['key', 'string'], ['newVersion', 'number']]
      });
      this.addSender('withdraw', {
        input: [['amount', 'bigNumber']]
      });
    }
  }], [{
    key: 'defaultQuery',

    /*
    Upgrades a colony to a new Colony contract version.
    */

    /*
      Allow a reputation miner to stake an amount of CLNY tokens, which is required before they can submit a new reputation root hash via `ReputationMiningCycle.submitNewHash`
    */

    /*
      Get the amount of staked CLNY tokens for a given user address
    */

    /*
    Returns the number of parent and child skills associated with the provided skill
    */

    /*
    Gets the `ReputationLogEntry` at a specified index for either ther currently active or inactive reputation update log
    */

    /*
    Returns the latest Colony contract version. This is the version used to create all new colonies.
    */

    /*
    Returns the number of colonies created on the Colony Network, i.e. the colonyId of the most recently created colony.
    */

    /*
    Returns the address of a colony when given the ID
    */
    get: function get() {
      return {
        contractName: 'IColonyNetwork',
        routerName: 'EtherRouter'
      };
    }
    /*
    Allow a user who has staked CLNY to withdraw their stake
    */

    /*
      Create and start a new Dutch Auction for the entire amount of a specified token owned by the Colony Network
    */

    /*
    Creates a new colony on the network.
    */

    /*
    Get the total number of skills in the network (both global and local skills)
    */

    /*
    Gets the length of the reputation update log for either the current active or inactive log
    */

    /*
    Given the id of a particular skill, returns the skill's parent skill id
    */

    /*
    Given a version of the colony contract, returns the address of the corresponding `Resolver` contract
    */

    /*
    Returns the address of the Meta Colony
    */

  }, {
    key: 'ColonyClient',
    get: function get() {
      return _index2.default;
    }
  }]);
  return ColonyNetworkClient;
}(_colonyJsContractClient2.default);

exports.default = ColonyNetworkClient;
//# sourceMappingURL=index.js.map