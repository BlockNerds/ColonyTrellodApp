{"version":3,"sources":["../../src/ColonyNetworkClient/index.js"],"names":["MISSING_ID","ColonyNetworkClient","name","symbol","decimals","adapter","getContractDeployTransaction","contractName","transaction","wallet","sendTransaction","hash","getTransactionReceipt","contractAddress","colonyClient","constructor","ColonyClient","networkClient","query","init","id","Number","isFinite","getColonyAddress","address","getColonyClientByAddress","getColony","call","Error","getMetaColonyAddress","addCaller","input","output","functionName","validateEmpty","skillId","getSkillCount","count","addSender","defaultGasLimit","eventHandlers","ColonyAdded","contract","handler","colonyId","colonyAddress","toNumber","AuctionCreated","auction","token","quantity","routerName"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n\nimport assert from 'assert';\nimport { utf8ToHex } from 'web3-utils';\nimport { isValidAddress } from '@colony/colony-js-utils';\nimport BigNumber from 'bn.js';\n\nimport ContractClient from '@colony/colony-js-contract-client';\n\nimport ColonyClient from '../ColonyClient/index';\n\nconst MISSING_ID = 'An ID parameter must be provided';\n\ntype Address = string;\n\nexport default class ColonyNetworkClient extends ContractClient {\n  /*\n  Returns the address of a colony when given the ID\n  */\n  getColony: ColonyNetworkClient.Caller<\n    {\n      id: number, // Integer colony ID\n    },\n    {\n      address: Address, // Address of the colony contract\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Returns the address of the Meta Colony\n  */\n  getMetaColonyAddress: ColonyNetworkClient.Caller<\n    {},\n    {\n      address: Address, // Address of the Meta Colony contract\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Returns the number of colonies created on the Colony Network, i.e. the colonyId of the most recently created colony.\n  */\n  getColonyCount: ColonyNetworkClient.Caller<\n    {},\n    {\n      count: number, // colonyId of the most recently created colony\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Given a version of the colony contract, returns the address of the corresponding `Resolver` contract\n  */\n  getColonyVersionResolver: ColonyNetworkClient.Caller<\n    {\n      version: number, // The Colony contract version\n    },\n    {\n      address: Address, // Address of the `Resolver` contract\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Returns the latest Colony contract version. This is the version used to create all new colonies.\n  */\n  getCurrentColonyVersion: ColonyNetworkClient.Caller<\n    {},\n    {\n      version: number, // The current / latest Colony contract version\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Given the id of a particular skill, returns the skill's parent skill id\n  */\n  getParentSkillId: ColonyNetworkClient.Caller<\n    {\n      skillId: number, // Id of the skill\n      parentSkillIndex: number, // Index of the `skill.parents` array to get\n    },\n    {\n      parentSkillId: number, // Id of the parent skill\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Gets the `ReputationLogEntry` at a specified index for either ther currently active or inactive reputation update log\n  */\n  getReputationUpdateLogEntry: ColonyNetworkClient.Caller<\n    {\n      id: number, // The reputation log members array index of the entry to get\n    },\n    {\n      amount: BigNumber, // amount\n      colony: Address, // Address of the colony\n      nPreviousUpdates: number, // number of previous updates\n      nUpdates: number, // number of updates\n      skillId: number, // skill Id\n      user: Address, // user address\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Gets the length of the reputation update log for either the current active or inactive log\n  */\n  getReputationUpdateLogLength: ColonyNetworkClient.Caller<\n    {},\n    {\n      count: number, // Length of Reputation update log array\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Returns the number of parent and child skills associated with the provided skill\n  */\n  getSkill: ColonyNetworkClient.Caller<\n    {\n      skillId: number, // skillId to be checked\n    },\n    {\n      nParents: number, // Number of parent skills\n      nChildren: number, // Number of child skills\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Get the total number of skills in the network (both global and local skills)\n  */\n  getSkillCount: ColonyNetworkClient.Caller<\n    {},\n    {\n      count: number, // The number of skills on the network\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n    Get the amount of staked CLNY tokens for a given user address\n  */\n  getStakedBalance: ColonyNetworkClient.Caller<\n    {\n      user: Address, // Address of the user\n    },\n    {\n      balance: BigNumber, // Amount of staked CLNY\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Creates a new colony on the network.\n  */\n  createColony: ColonyNetworkClient.Sender<\n    {\n      tokenAddress: Address, // Token to import. Note: the ownership of the token contract must be transferred to the newly-created Colony.\n    },\n    {\n      colonyId: number, // ID of the newly-created Colony\n      colonyAddress: Address, // Address of the newly-created Colony\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n    Allow a reputation miner to stake an amount of CLNY tokens, which is required before they can submit a new reputation root hash via `ReputationMiningCycle.submitNewHash`\n  */\n  deposit: ColonyNetworkClient.Sender<\n    {\n      amount: BigNumber, // Amount of CLNY to stake\n    },\n    {},\n    ColonyNetworkClient,\n  >;\n  /*\n    Create and start a new Dutch Auction for the entire amount of a specified token owned by the Colony Network\n  */\n  startTokenAuction: ColonyNetworkClient.Sender<\n    {\n      tokenAddress: Address, // Address of the token held by the network to be auctioned\n    },\n    {\n      auction: string, // The address of the auction contract\n      token: Address, // The address of the token being auctioned\n      quantity: number, // The amount of available tokens for auction\n    },\n    ColonyNetworkClient,\n  >;\n  /*\n  Upgrades a colony to a new Colony contract version.\n  */\n  upgradeColony: ColonyNetworkClient.Sender<\n    {\n      id: number, // Colony ID to be upgraded\n      newVersion: number, // The target version for the upgrade\n    },\n    {},\n    ColonyNetworkClient,\n  >;\n  /*\n  Allow a user who has staked CLNY to withdraw their stake\n  */\n  withdraw: ColonyNetworkClient.Sender<\n    {\n      amount: BigNumber, // Amount of CLNY to withdraw from stake\n    },\n    {},\n    ColonyNetworkClient,\n  >;\n\n  static get defaultQuery() {\n    return {\n      contractName: 'IColonyNetwork',\n      routerName: 'EtherRouter',\n    };\n  }\n\n  static get ColonyClient(): * {\n    return ColonyClient;\n  }\n\n  /*\n  Deploys a new ERC20 compatible token contract for you to use with your Colony. You can also use your own token when creating a Colony.\n  */\n  async createToken({\n    name,\n    symbol,\n    decimals = 18,\n  }: {\n    name: string, // Name of the token to create\n    symbol: string, // Symbol of the token (e.g. CLNY)\n    decimals: number, // Decimals to use for your token\n  }) {\n    const transaction = await this.adapter.getContractDeployTransaction(\n      {\n        contractName: 'Token',\n      },\n      [utf8ToHex(name), utf8ToHex(symbol), decimals],\n    );\n    const { hash } = await this.adapter.wallet.sendTransaction(transaction);\n    const { contractAddress } = await this.adapter.getTransactionReceipt(hash);\n    return contractAddress;\n  }\n  /*\n  Returns an initialized ColonyClient for the contract at address `contractAddress`\n  */\n  async getColonyClientByAddress(contractAddress: Address) {\n    const colonyClient = new this.constructor.ColonyClient({\n      adapter: this.adapter,\n      networkClient: this,\n      query: { contractAddress },\n    });\n    return colonyClient.init();\n  }\n  /*\n  Returns an initialized ColonyClient for the specified ID of a deployed colony contract\n  */\n  async getColonyClient(id: number) {\n    assert(Number.isFinite(id), MISSING_ID);\n    const address = await this.getColonyAddress(id);\n    return this.getColonyClientByAddress(address);\n  }\n  /*\n  Gets the address of a deployed colony contract for the specified ID of a deployed colony contract\n  */\n  async getColonyAddress(id: number) {\n    assert(Number.isFinite(id), MISSING_ID);\n\n    const { address } = await this.getColony.call({ id });\n\n    if (!isValidAddress(address))\n      throw new Error(`Colony with ID ${id} could not be found`);\n\n    return address;\n  }\n  /*\n  Gets the Meta Colony as an initialized ColonyClient\n   */\n  async getMetaColonyClient() {\n    const { address } = await this.getMetaColonyAddress.call();\n\n    if (!isValidAddress(address))\n      throw new Error(`Meta Colony could not be found`);\n\n    return this.getColonyClientByAddress(address);\n  }\n  initializeContractMethods() {\n    // Callers\n    this.addCaller('getColony', {\n      input: [['id', 'number']],\n      output: [['address', 'address']],\n    });\n    this.addCaller('getMetaColonyAddress', {\n      functionName: 'getMetaColony',\n      output: [['address', 'address']],\n    });\n    this.addCaller('getColonyCount', {\n      output: [['count', 'number']],\n    });\n    this.addCaller('getColonyVersionResolver', {\n      input: [['version', 'number']],\n      output: [['address', 'address']],\n    });\n    this.addCaller('getCurrentColonyVersion', {\n      output: [['version', 'number']],\n    });\n    this.addCaller('getStakedBalance', {\n      input: [['user', 'address']],\n      output: [['balance', 'bigNumber']],\n    });\n    this.addCaller('getParentSkillId', {\n      input: [['skillId', 'number'], ['parentSkillIndex', 'number']],\n      output: [['parentSkillId', 'number']],\n    });\n    this.addCaller('getReputationUpdateLogEntry', {\n      input: [['id', 'number']],\n      output: [\n        ['user', 'string'],\n        ['amount', 'bigNumber'],\n        ['skillId', 'number'],\n        ['colony', 'string'],\n        ['nUpdates', 'number'],\n        ['nPreviousUpdates', 'number'],\n      ],\n    });\n    this.addCaller('getReputationUpdateLogLength', {\n      output: [['count', 'number']],\n    });\n    this.addCaller('getSkill', {\n      input: [['skillId', 'number']],\n      output: [['nParents', 'number'], ['nChildren', 'number']],\n      validateEmpty: async ({ skillId }: { skillId: number }) => {\n        const { count } = await this.getSkillCount.call();\n        if (skillId > count) throw new Error(`Skill ID ${skillId} not found`);\n        return true;\n      },\n    });\n    this.addCaller('getSkillCount', {\n      output: [['count', 'number']],\n    });\n\n    // Senders\n    this.addSender('createColony', {\n      input: [['tokenAddress', 'address']],\n      defaultGasLimit: 2500000,\n      eventHandlers: {\n        ColonyAdded: {\n          contract: this.contract,\n          handler({\n            colonyId,\n            colonyAddress,\n          }: {\n            colonyId: BigNumber,\n            colonyAddress: Address,\n          }) {\n            return {\n              colonyId: colonyId.toNumber(),\n              colonyAddress,\n            };\n          },\n        },\n      },\n    });\n    this.addSender('deposit', {\n      input: [['amount', 'bigNumber']],\n    });\n    this.addSender('startTokenAuction', {\n      input: [['tokenAddress', 'address']],\n      eventHandlers: {\n        AuctionCreated: {\n          contract: this.contract,\n          handler({\n            auction,\n            token,\n            quantity,\n          }: {\n            auction: string,\n            token: string,\n            quantity: BigNumber,\n          }) {\n            return {\n              auction,\n              token,\n              quantity: quantity.toNumber(),\n            };\n          },\n        },\n      },\n    });\n    this.addSender('upgradeColony', {\n      input: [['key', 'string'], ['newVersion', 'number']],\n    });\n    this.addSender('withdraw', {\n      input: [['amount', 'bigNumber']],\n    });\n  }\n}\n"]}