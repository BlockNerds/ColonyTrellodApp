{"version":3,"sources":["../../../src/ColonyClient/callers/GetTask.js"],"names":["GetTask","params","functionName","input","output","_validateEmpty","inputValues","taskId","client","getTaskCount","call","count","result","task","skillId","concat","length","Object","assign","id","toNumber","Caller"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AALA;;IAuBqBA,O;;;AAOnB,mBAAYC,MAAZ,EAAuB;AAAA;;AAAA;;AAAA;AAEnBC,oBAAc,SAFK;AAGnBC,aAAO,CAAC,CAAC,QAAD,EAAW,QAAX,CAAD,CAHY;AAInBC,cAAQ,CACN,CAAC,mBAAD,EAAsB,UAAtB,CADM,EAEN,CAAC,iBAAD,EAAoB,UAApB,CAFM,EAGN,CAAC,WAAD,EAAc,SAAd,CAHM,EAIN,CAAC,WAAD,EAAc,SAAd,CAJM,EAKN,CAAC,SAAD,EAAY,MAAZ,CALM,EAMN,CAAC,qBAAD,EAAwB,QAAxB,CANM,EAON,CAAC,OAAD,EAAU,QAAV,CAPM,EAQN,CAAC,iBAAD,EAAoB,MAApB,CARM,EASN,CAAC,UAAD,EAAa,QAAb,CATM;AAJW,OAehBH,MAfgB;;AAiBrB,UAAKI,cAAL;AAAA,0FAAsB,iBAAOC,WAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdC,sBADc,GACLD,eAAeA,YAAYC,MADtB;;AAAA,qBAEhBA,MAFgB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGM,MAAKC,MAAL,CAAYC,YAAZ,CAAyBC,IAAzB,EAHN;;AAAA;AAAA;AAGVC,qBAHU,SAGVA,KAHU;;AAIlB,sCAAOJ,UAAUI,KAAjB,oBAAwCJ,MAAxC;;AAJkB;AAAA,iDAMb,IANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAtB;;AAAA;AAAA;AAAA;AAAA;AAjBqB;AAyBtB;AACD;;;;;qCACiBK,M,SAAmC;AAAA,UAAbL,MAAa,SAAbA,MAAa;;AAClD,UAAMM,wIAA8BD,MAA9B,CAAN;;AAEA;AACA;AACA,UAAME,UAAqB,GAAGC,MAAH,CAAUH,OAAOA,OAAOI,MAAP,GAAgB,CAAvB,CAAV,EAAqC,CAArC,CAA3B;;AAEA,aAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB;AAC7B;AACAM,YAAIZ,MAFyB;AAG7BO,iBAAS,gCAAYA,OAAZ,IAAuBA,QAAQM,QAAR,EAAvB,GAA4C;AAHxB,OAAxB,CAAP;AAKD;;;EA9CkC,iCAAeC,M;;kBAA/BrB,O","file":"GetTask.js","sourcesContent":["/* @flow */\n/* eslint-disable no-underscore-dangle */\n\nimport assert from 'assert';\nimport BigNumber from 'bn.js';\nimport ContractClient from '@colony/colony-js-contract-client';\nimport { isBigNumber } from '@colony/colony-js-utils';\n\nimport type ColonyClient from '../index';\n\ntype InputValues = { taskId: number };\ntype CallResult = [\n  string,\n  string,\n  boolean,\n  boolean,\n  number,\n  number,\n  number,\n  number,\n  number,\n  [number], // Currently just one item\n];\n\nexport default class GetTask extends ContractClient.Caller<\n  InputValues,\n  // Flow is confused by the call to `super._getOutputValues`, so let the\n  // OutputValues generic pass through for now; it's overspecified\n  *,\n  ColonyClient,\n> {\n  constructor(params: *) {\n    super({\n      functionName: 'getTask',\n      input: [['taskId', 'number']],\n      output: [\n        ['specificationHash', 'ipfsHash'],\n        ['deliverableHash', 'ipfsHash'],\n        ['finalized', 'boolean'],\n        ['cancelled', 'boolean'],\n        ['dueDate', 'date'],\n        ['payoutsWeCannotMake', 'number'],\n        ['potId', 'number'],\n        ['deliverableDate', 'date'],\n        ['domainId', 'number'],\n      ],\n      ...params,\n    });\n    this._validateEmpty = async (inputValues?: *) => {\n      const taskId = inputValues && inputValues.taskId;\n      if (taskId) {\n        const { count } = await this.client.getTaskCount.call();\n        assert(taskId <= count, `Task with ID ${taskId} not found`);\n      }\n      return true;\n    };\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _getOutputValues(result: CallResult, { taskId }: *) {\n    const task = super._getOutputValues(result);\n\n    // Until arrays of bignumbers are supported as a parameter type,\n    // take the last item of the call result (skillIds) and use the first one\n    const skillId: BigNumber = [].concat(result[result.length - 1])[0];\n\n    return Object.assign({}, task, {\n      // Include the task ID\n      id: taskId,\n      skillId: isBigNumber(skillId) ? skillId.toNumber() : null,\n    });\n  }\n}\n"]}