'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

var _colonyJsContractClient = require('@colony/colony-js-contract-client');

var _colonyJsContractClient2 = _interopRequireDefault(_colonyJsContractClient);

var _colonyJsUtils = require('@colony/colony-js-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-underscore-dangle */

var GetTask = function (_ContractClient$Calle) {
  (0, _inherits3.default)(GetTask, _ContractClient$Calle);

  function GetTask(params) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, GetTask);

    var _this = (0, _possibleConstructorReturn3.default)(this, (GetTask.__proto__ || Object.getPrototypeOf(GetTask)).call(this, (0, _extends3.default)({
      functionName: 'getTask',
      input: [['taskId', 'number']],
      output: [['specificationHash', 'ipfsHash'], ['deliverableHash', 'ipfsHash'], ['finalized', 'boolean'], ['cancelled', 'boolean'], ['dueDate', 'date'], ['payoutsWeCannotMake', 'number'], ['potId', 'number'], ['deliverableDate', 'date'], ['domainId', 'number']]
    }, params)));

    _this._validateEmpty = function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(inputValues) {
        var taskId, _ref2, count;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                taskId = inputValues && inputValues.taskId;

                if (!taskId) {
                  _context.next = 7;
                  break;
                }

                _context.next = 4;
                return _this.client.getTaskCount.call();

              case 4:
                _ref2 = _context.sent;
                count = _ref2.count;

                (0, _assert2.default)(taskId <= count, 'Task with ID ' + taskId + ' not found');

              case 7:
                return _context.abrupt('return', true);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    return _this;
  }
  // eslint-disable-next-line class-methods-use-this


  (0, _createClass3.default)(GetTask, [{
    key: '_getOutputValues',
    value: function _getOutputValues(result, _ref3) {
      var taskId = _ref3.taskId;

      var task = (0, _get3.default)(GetTask.prototype.__proto__ || Object.getPrototypeOf(GetTask.prototype), '_getOutputValues', this).call(this, result);

      // Until arrays of bignumbers are supported as a parameter type,
      // take the last item of the call result (skillIds) and use the first one
      var skillId = [].concat(result[result.length - 1])[0];

      return Object.assign({}, task, {
        // Include the task ID
        id: taskId,
        skillId: (0, _colonyJsUtils.isBigNumber)(skillId) ? skillId.toNumber() : null
      });
    }
  }]);
  return GetTask;
}(_colonyJsContractClient2.default.Caller);

exports.default = GetTask;
//# sourceMappingURL=GetTask.js.map