{"version":3,"sources":["../src/raceAgainstTimeout.js"],"names":["promise","timeoutMs","timeoutCallback","timeout","timeoutPromise","Promise","resolve","reject","setTimeout","error","Error","race","clearTimeout","raceAgainstTimeout"],"mappings":";;;;;;;;;;;;;;;sFAEA,iBACEA,OADF,EAEEC,SAFF,EAGEC,eAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAKMC,mBALN;AAMQC,0BANR,GAMyB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtDJ,wBAAUK,WAAW,YAAM;AACzB,oBAAMC,QAAQ,IAAIC,KAAJ,oBAA2BT,SAA3B,SAAd;AACA,oBAAIC,eAAJ,EAAqBA;AACrBK,uBAAOE,KAAP;AACD,eAJS,EAIPR,SAJO,CAAV;AAKD,aANsB,CANzB;AAAA;AAAA;AAAA,mBAeiBI,QAAQM,IAAR,CAAa,CAACX,OAAD,EAAUI,cAAV,CAAb,CAfjB;;AAAA;AAAA;;AAAA;AAAA;;AAiBIQ,yBAAaT,OAAb;AAjBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeU,kB;;;;;;;kBAqBAA,kB","file":"raceAgainstTimeout.js","sourcesContent":["/* @flow */\n\nasync function raceAgainstTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  timeoutCallback?: Function, // useful for e.g. cleaning up\n): Promise<T> {\n  let timeout;\n  const timeoutPromise = new Promise((resolve, reject) => {\n    timeout = setTimeout(() => {\n      const error = new Error(`Timeout after ${timeoutMs} ms`);\n      if (timeoutCallback) timeoutCallback();\n      reject(error);\n    }, timeoutMs);\n  });\n\n  try {\n    return await Promise.race([promise, timeoutPromise]);\n  } finally {\n    clearTimeout(timeout);\n  }\n}\n\nexport default raceAgainstTimeout;\n"]}