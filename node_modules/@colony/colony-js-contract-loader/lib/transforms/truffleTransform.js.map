{"version":3,"sources":["../../src/transforms/truffleTransform.js"],"names":["truffleTransform","abi","bytecode","networks","networkId","address","networkIds","Object","keys","length","Error","parseInt"],"mappings":";;;;;kBAcwBA,gB;AAAT,SAASA,gBAAT,GAGb;AAAA,iFAFyD,EAEzD;AAAA,sBAFEC,GAEF;AAAA,MAFEA,GAEF,4BAFQ,EAER;AAAA,MAFYC,QAEZ,QAFYA,QAEZ;AAAA,2BAFsBC,QAEtB;AAAA,MAFsBA,QAEtB,iCAFiC,EAEjC;;AAAA,kFADuB,EACvB;AAAA,MADEC,SACF,SADEA,SACF;;AACA,MAAIC,gBAAJ;;AAEA,MAAMC,aAAaC,OAAOC,IAAP,CAAYL,QAAZ,CAAnB;;AAEA,MAAIC,aAAaE,WAAWG,MAA5B,EAAoC;AAClC,QAAI,CAACN,SAASC,SAAT,CAAL,EACE,MAAM,IAAIM,KAAJ,iBAAwBN,SAAxB,4BAAN;AACCC,WAH+B,GAGnBF,SAASC,SAAT,CAHmB,CAG/BC,OAH+B;AAInC,GAJD,MAIO;AAAA,gBAGHF,SAASQ,SAASL,WAAWA,WAAWG,MAAX,GAAoB,CAA/B,CAAT,EAA4C,EAA5C,CAAT,KAA6D,EAH1D;AACL;;;AACGJ,WAFE,SAEFA,OAFE;AAIN;;AAED,SAAO;AACLJ,YADK;AAELI,oBAFK;AAGLH;AAHK,GAAP;AAKD","file":"truffleTransform.js","sourcesContent":["/* @flow */\n\nimport type { Query } from '../interface/ContractLoader';\n\ntype TruffleArtifact = {\n  abi: Array<{}>,\n  bytecode: string,\n  networks: {\n    [networkId: number]: {\n      address: string,\n    },\n  },\n};\n\nexport default function truffleTransform(\n  { abi = [], bytecode, networks = {} }: TruffleArtifact = {},\n  { networkId }: Query = {},\n) {\n  let address;\n\n  const networkIds = Object.keys(networks);\n\n  if (networkId && networkIds.length) {\n    if (!networks[networkId])\n      throw new Error(`Network ID ${networkId} not found in contract`);\n    ({ address } = networks[networkId]);\n  } else {\n    // Pick the last network (assumed to be the most recent)\n    ({ address } =\n      networks[parseInt(networkIds[networkIds.length - 1], 10)] || {});\n  }\n\n  return {\n    abi,\n    address,\n    bytecode,\n  };\n}\n"]}